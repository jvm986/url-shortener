// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jvm986/url-shortener/internal/pkg/clients/dynamodbclient (interfaces: DynamoDbClient)

// Package dynamodbclientmocks is a generated GoMock package.
package dynamodbclientmocks

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
)

// MockDynamoDbClient is a mock of DynamoDbClient interface.
type MockDynamoDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDbClientMockRecorder
}

// MockDynamoDbClientMockRecorder is the mock recorder for MockDynamoDbClient.
type MockDynamoDbClientMockRecorder struct {
	mock *MockDynamoDbClient
}

// NewMockDynamoDbClient creates a new mock instance.
func NewMockDynamoDbClient(ctrl *gomock.Controller) *MockDynamoDbClient {
	mock := &MockDynamoDbClient{ctrl: ctrl}
	mock.recorder = &MockDynamoDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDbClient) EXPECT() *MockDynamoDbClientMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockDynamoDbClient) GetItem(arg0 context.Context, arg1 *dynamodb.GetItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamoDbClientMockRecorder) GetItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoDbClient)(nil).GetItem), varargs...)
}

// PutItem mocks base method.
func (m *MockDynamoDbClient) PutItem(arg0 context.Context, arg1 *dynamodb.PutItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamoDbClientMockRecorder) PutItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoDbClient)(nil).PutItem), varargs...)
}
